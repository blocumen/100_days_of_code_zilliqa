scilla_version 0
import BoolUtils

library SocialMediaPayment

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let zero = Uint128 0
let not_owner_code = Uint32 1
let accepted_code = Uint32 0
let user_exists_code = Uint32 2
  
(*Start typing from the line below definition of a boolean  variable true ‘let true =True’ *)
  let true = True
  
contract SocialMediaPayment(owner: ByStr20)

field users: Map ByStr20 String
    = Emp ByStr20 String

field used_usernames: Map String Bool
    = Emp String Bool

transition deposit()
sender_is_owner = builtin eq _sender owner;
match sender_is_owner with
     | False =>
     
          msg = {_tag: "";
                _recipient: _sender;
                _amount: zero;
                code: not_owner_code};
          msgs = one_msg msg;
          send msgs

     | True =>
        accept;
        msg = {_tag: "";
                _recipient: _sender;
                _amount: zero;
                code: accepted_code};
        msgs = one_msg msg;
        send msgs
        
     end
end


transition register_user (user_address: ByStr20, twitter_username: String)

    user_exists <- exists users[user_address];
    username_exists <- exists used_usernames[twitter_username];
    already_exists = orb user_exists username_exists ;     
    match already_exists with
    | True =>
    
     msg = {_tag: ""; _recipient: _sender; _amount: zero; code: user_exists_code};
     msgs = one_msg msg;
     send msgs


    | False =>
    
        (*start typing from the line below*)
        users[user_address] := twitter_username;
        used_usernames[twitter_username] := true

    end

      
end

